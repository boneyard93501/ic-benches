# ansible/deploy.yml — v1.6.0 (final)
# Purpose: copy repo → remote, install deps, run tests, run benchmark, archive metrics (IP endpoints & .env namespaces)

- name: Deploy ic-benches, run tests and benchmark, archive metrics
  hosts: bench
  gather_facts: yes
  vars:
    repo_path: /opt/ic-benches
    data_path: "{{ repo_path }}/data/s3-bench"
    quick_data_path: "{{ repo_path }}/data/s3-bench-quick"
    run_quick: false

    # Controller paths (repo root relative)
    config_file_src: "{{ playbook_dir }}/../config.toml"
    env_file_src:     "{{ playbook_dir }}/../.env"

    run_provider: "ic-eu"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    # ---------- Remote target preparation ----------
    - name: Ensure base dir exists (remote)
      become: yes
      ansible.builtin.file:
        path: "{{ repo_path }}"
        state: directory
        mode: "0755"

    - name: Chown repo dir to SSH user (remote)
      become: yes
      ansible.builtin.file:
        path: "{{ repo_path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes

    # ---------- Controller project root ----------
    - name: Resolve absolute project root on controller
      delegate_to: localhost
      ansible.builtin.command: bash -lc 'cd "{{ playbook_dir }}/.." && pwd -P'
      register: project_root
      changed_when: false

    - name: Show controller project root
      delegate_to: localhost
      ansible.builtin.debug:
        msg: "Controller project root: {{ project_root.stdout }}"

    # ---------- Sync repo to remote ----------
    - name: Rsync repo to VM from absolute project root
      delegate_to: localhost
      ansible.posix.synchronize:
        src: "{{ project_root.stdout }}/"
        dest: "{{ repo_path }}"
        delete: no
        recursive: yes
        archive: yes
        compress: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.venv"
          - "--exclude=htmlcov"
          - "--exclude=metrics"
          - "--exclude=reports"

    # ---------- Prerequisites on remote ----------
    - name: Ensure base packages present (curl, tar, rsync)
      become: yes
      ansible.builtin.package:
        name: [curl, tar, rsync]
        state: present

    - name: Install uv to ~/.local/bin (idempotent)
      ansible.builtin.shell: |
        set -e
        curl -LsSf https://astral.sh/uv/install.sh | sh
      args:
        creates: "{{ ansible_user_dir }}/.local/bin/uv"

    - name: Detect uv binary
      ansible.builtin.shell: "command -v uv || echo {{ ansible_user_dir }}/.local/bin/uv"
      register: uv_path
      changed_when: false

    - name: Set uv_bin fact
      ansible.builtin.set_fact:
        uv_bin: "{{ uv_path.stdout }}"

    - name: Select mc binary URL for platform
      ansible.builtin.set_fact:
        mc_url: >-
          https://dl.min.io/client/mc/release/{{ 'linux-amd64' if ansible_architecture in ['x86_64','amd64'] else 'linux-arm64' if ansible_architecture in ['aarch64','arm64'] else 'linux-amd64' }}/mc

    - name: Ensure /usr/local/bin exists
      become: yes
      ansible.builtin.file:
        path: /usr/local/bin
        state: directory
        mode: "0755"

    - name: Install mc binary
      become: yes
      ansible.builtin.get_url:
        url: "{{ mc_url }}"
        dest: /usr/local/bin/mc
        mode: "0755"

    - name: Verify mc is available
      ansible.builtin.command: mc --version
      changed_when: false

    # ---------- Copy config and .env ----------
    - name: Copy config.toml (controller → remote)
      ansible.builtin.copy:
        src: "{{ config_file_src }}"
        dest: "{{ repo_path }}/config.toml"
        mode: "0644"

    - name: Copy .env if present (controller → remote)
      ansible.builtin.copy:
        src: "{{ env_file_src }}"
        dest: "{{ repo_path }}/.env"
        mode: "0600"
      ignore_errors: yes

    # ---------- Project setup and benchmark ----------
    - name: Install project deps (uv sync + editable install)
      ansible.builtin.shell: |
        "{{ uv_bin }}" sync
        "{{ uv_bin }}" pip install -e .
      args:
        chdir: "{{ repo_path }}"

    - name: Generate dataset (idempotent)
      ansible.builtin.shell: >
        "{{ uv_bin }}" run python scripts/data_gen.py --config config.toml
      args:
        chdir: "{{ repo_path }}"

    - name: Run tests (integration)
      ansible.builtin.shell: >
        "{{ uv_bin }}" run pytest -v tests/integration || true
      args:
        chdir: "{{ repo_path }}"

    - name: Run benchmark (export .env)
      ansible.builtin.shell: |
        set -e
        set -a
        [ -f .env ] && . ./.env || true
        set +a
        "{{ uv_bin }}" run ic-bench --config config.toml --provider "{{ run_provider }}" {{ '--quick' if run_quick else '' }}
      args:
        chdir: "{{ repo_path }}"
        executable: /bin/bash

    # ---------- Archive metrics ----------
    - name: Archive metrics on VM
      vars:
        ts: "{{ '%Y%m%dT%H%M%SZ' | strftime(ansible_date_time.epoch) }}"
        archive_dir: "{{ repo_path }}/.bench_archives"
        archive_name: "metrics_{{ ts }}.tar.gz"
      block:
        - ansible.builtin.file:
            path: "{{ archive_dir }}"
            state: directory
            mode: "0755"
        - ansible.builtin.shell: |
            set -e
            INCLUDE=""
            if [ -d "{{ data_path }}" ]; then
              INCLUDE="$INCLUDE -C {{ repo_path }} data/s3-bench"
            fi
            if [ -d "{{ quick_data_path }}" ]; then
              INCLUDE="$INCLUDE -C {{ repo_path }} data/s3-bench-quick"
            fi
            if [ -n "$INCLUDE" ]; then
              tar -czf {{ archive_dir }}/{{ archive_name }} $INCLUDE
            else
              echo "No data directories to archive; skipping."
            fi
          args:
            chdir: "{{ repo_path }}"
        - ansible.builtin.set_fact:
            vm_metrics_archive: "{{ archive_dir }}/{{ archive_name }}"

    - name: Show archive path
      ansible.builtin.debug:
        msg: "Metrics archive path on VM: {{ vm_metrics_archive }}"
